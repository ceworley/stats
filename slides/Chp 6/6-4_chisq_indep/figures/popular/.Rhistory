for (i in 1:5000) {samp <- sample(area, 10) sample_means10[i] <- mean(samp) samp <- sample(area, 100) sample_means100[i] <- mean(samp)}
for (i in 1:10) {    a <- cdc$gender[i]print((a == "m" & cdc$age[i] < 40) | a == "f") }
source("http://www.openintro.org/stat/data/cdc.R") for (i in 1:10) {    a <- cdc$gender[i]print((a == "m" & cdc$age[i] < 40) | a == "f") }boxplot(wtdesire ~ gender, cdc)
source("http://www.openintro.org/stat/data/cdc.R")for (i in 1:10) {a <- cdc$gender[i]print((a == "m" & cdc$age[i] < 40) | a == "f")}boxplot(wtdesire ~ gender, cdc)
source("http://www.openintro.org/stat/data/cdc.R") for(i in 1:10){  a <- cdc$gender[i]print((a == "m" & cdc$age[i] < 40) | a == "f") }boxplot(wtdesire ~ gender, cdc)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")load("ames.RData")
area <- ames$Gr.Liv.Areaprice <- ames$SalePrice
summary(area)hist(area)
samp1 <- sample(area, 50)
mean(samp1)
sample_means50 <- rep(0, 5000)for (i in 1:5000) {samp <- sample(area, 50) sample_means50[i] <- mean(samp)}hist(sample_means50)
q()
27*47
q()
?rgamma
plot(x = 1:20, y = rgamma(1:20,2,2))
plot(x = 1:20, y = dgamma(1:20,2,2))
plot(x = 1:20, y = dgamma(1:20,2,2), type = "l")
plot(x = 1:20, y = dgamma(0:20,2,2), type = "l")
plot(x = 0:20, y = dgamma(0:20,2,2), type = "l")
plot(x = seq(0,20,0.01), y = dgamma(seq(0,20,0.01),2,2), type = "l")
hist(rgamma(2000,2,2))
library(openintro)
COL
densityPlot(a, bw = 1, from = -2, to = 22, col = COL[1], fadingBorder = "66", histo = "faded", xlab = "", axes = FALSE, ylab = "", breaks = 20)
set.seed(85479)#
a  = rgamma(2000,2,2)
par(mar=c(4,0,0,0), mgp=c(2.7,0.7,0), las = 1)
q()
?chisq.test
q()
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
q()
.5/.2
(50-49.5)/(2/sqrt(100))
(50-49.5)/(2/sqrt(10000))
library(openintro)
normTail(L = -1.65, U = 1.65, col = COL[1])
normTail(L = -1.96, U = 1.96, col = COL[1])
normTail(L = -1.96, U = 1.96, col = COL[1], axes = FALSE)
axis(1, at = c(-3, -1.96, 0, 1.96, 3), labels = c(NA, -1.96, 0, 1.96, NA))
locator(1)
text(-3.45, y = 0.045, 0.025)
text(3.45, y = 0.045, 0.025)
text(0, y = 0.08, 0.95)
par(mar=c(3,0,0,0))
normTail(L = -1.96, U = 1.96, col = COL[1], axes = FALSE)
text(-3.45, y = 0.045, 0.025)
text(3.45, y = 0.045, 0.025)
text(0, y = 0.08, 0.95)
axis(1, at = c(-3, -1.96, 0, 1.96, 3), labels = c(NA, -1.96, 0, 1.96, NA))
normTail(U = 1.96, col = COL[1], axes = FALSE)
axis(1, at = c(-3, 0, 1.96, 3), labels = c(NA, 0, 1.96, NA))
text(3.45, y = 0.045, 0.025)
text(0, y = 0.08, 0.95)
lines(x = c(-1.96,-1.96), y = c(0, dnorm(1.96)), lty = 3)
text(-3.45, y = 0.045, 0.025, col = "red")
normTail(L = -1.96, U = 1.96, col = COL[1], axes = FALSE)
text(3.45, y = 0.045, 0.025, cex = 2)
text(3.25, y = 0.045, 0.025, cex = 1.5)
normTail(L = -1.96, U = 1.96, col = COL[1], axes = FALSE)
text(3.25, y = 0.045, 0.025, cex = 1.5)
text(-3.25, y = 0.045, 0.025, cex = 1.5)
text(0, y = 0.08, 0.95, cex = 1.5)
axis(1, at = c(-3, -1.96, 0, 1.96, 3), labels = c(NA, -1.96, 0, 1.96, NA))
normTail(U = 1.65, col = COL[1], axes = FALSE)
axis(1, at = c(-3, 0, 1.65, 3), labels = c(NA, 0, 1.65, NA))
lines(x = c(-1.65,-1.65), y = c(0, dnorm(1.65)), lty = 3)
text(0, y = 0.08, 0.90, cex = 1.5)
text(3.25, y = 0.045, 0.05, cex = 1.5)
text(-3.25, y = 0.045, 0.05, cex = 1.5, col = "red")
normTail(U = 1.65, col = COL[1], axes = FALSE)
axis(1, at = c(-3, 0, 1.65, 3), labels = c(NA, 0, 1.65, NA))#
lines(x = c(-1.65,-1.65), y = c(0, dnorm(1.65)), lty = 3, col = "red")#
text(0, y = 0.08, 0.90, cex = 1.5)#
text(3.25, y = 0.045, 0.05, cex = 1.5)#
text(-3.25, y = 0.045, 0.05, cex = 1.5, col = "red")
q()
dim(ames)
download.file("http://www.openintro.org/stat/data/ames.RData", destfile = "ames.RData")
load("ames.RData")
plt(ames)
counts <- matrix(c(1982, 10010, 11992, 4024, 990, 5014, 6006, 11000, 17006), ncol=3, nrow=3)#
colnames(counts) <- c('YF and survived','YF and died','Total')#
rownames(counts) <- c('Caucasians', 'Non-Caucasians', 'Total')
counts
counts <- matrix(c(1982, 10010, 4024, 990, 6006, 11000), ncol=2, nrow=2)#
colnames(counts) <- c('YF and survived','YF and died')#
rownames(counts) <- c('Caucasians', 'Non-Caucasians')
counts
?margin.table
margin.table(counts,1)
margin.table(counts,2)
addmargins(counts)
prop.table(counts)
prop.table(counts,1)
prop.table(counts,2)
?prop.table
prop.table(counts, margin = 1)
prop.table(counts, margin = 2)
6/34
400/300*273
38+14
52+13
88.8/7
92.9/7
q()
Kelsey2t <- read.csv("~/Desktop/Kelsey2t.csv")
View(Kelsey2t)
Kelsey2t = read.csv("Kelsey2t.csv")
mental <- Kelsey2t$TCU006A
summary(mental)
male <- (Kelsey2t, Kelsey2t$RANDSEX == 1)
fix(inference)
CPS4.1 <- read.csv("~/Desktop/CPS4-1.csv")
View(CPS4.1)
mean(CPS4$pop.Cath, na.rm = TRUE)
mean(CPS4.1$pop.Cath, na.rm = TRUE)
class(CPS4.1$pop.Cath)
CPS4$pop.Cath[CPS4$Nation == "Vatican"] = 99
CPS4.1$pop.Cath[CPS4$Nation == "Vatican"] = 99
CPS4.1$pop.Cath[CPS4.1$Nation == "Vatican"] = 99
CPS4.1$pop.Cath[CPS4.1$Nation == "Vatican City"] = 99
sqrt(80^2-70^2)
q()
energyuse2 <- read.csv("~/Desktop/energyuse2.csv")
View(energyuse2)
`dotPlot` <-#
function(x, fact=NULL, vertical=FALSE, at=1, key=NULL, pch=20, col=fadeColor('black', '66'), cex=1.5, add=FALSE, axes=TRUE, xlim=NULL, ylim=NULL, ...){#
skipOut <- FALSE#
if(!is.null(fact[1])){#
if(!is.null(key[1])){#
uFact <- key#
} else {#
uFact <- unique(fact)#
}#
n <- length(uFact)#
if(length(at) == 1){#
at <- 1:n#
}#
dataR <- range(x)#
atR <- range(at)#
if(!vertical){#
if(is.null(xlim[1])){#
xlim <- dataR#
}#
if(is.null(ylim[1])){#
ylim <- atR + c(-1,1)*diff(atR)/7#
}#
} else {#
if(is.null(xlim[1])){#
xlim <- atR + c(-1,1)*diff(atR)/7#
}#
if(is.null(ylim[1])){#
ylim <- dataR#
}#
}#
if(length(pch) == 1){#
pch <- rep(pch, length(at))#
}#
if(length(col) == 1){#
col <- rep(col, length(at))#
}#
if(length(cex) == 1){#
cex <- rep(cex, length(at))#
}#
dotPlot(x[fact == uFact[1]], vertical=vertical, at=at[1], axes=axes, add=add, pch=pch[1], col=col[1], cex=cex[1], xlim=xlim, ylim=ylim, ...)#
for(i in 2:n){#
dotPlot(x[fact == uFact[i]], vertical=vertical, at=at[i], add=TRUE, pch=pch[i], col=col[i], cex=cex[i], axes=FALSE)#
}#
if(axes & !add){#
if(vertical){#
axis(1, at=at, labels=uFact)#
} else {#
axis(2, at=at, labels=uFact)#
}#
}#
skipOut=TRUE#
}#
y <- rep(at[1], length(x))#
if(vertical & !skipOut){#
if(add){#
points(y,x, pch=pch[1], col=col[1], cex=cex[1], ...)#
} else {#
if(is.null(xlim[1])){#
xlim <- at[1]+c(-1,1)#
}#
if(is.null(ylim[1])){#
ylim <- range(x)#
}#
plot(y,x,axes=FALSE,xlim=xlim, ylim=ylim, pch=pch[1], col=col[1], cex=cex[1], ...)#
}#
} else if(!skipOut){#
if(add){#
points(x,y, pch=pch[1], col=col[1], cex=cex[1], ...)#
} else {#
if(is.null(ylim[1])){#
ylim <- at[1]+c(-1,1)#
}#
if(is.null(xlim[1])){#
xlim <- range(x)#
}#
plot(x,y,axes=FALSE,xlim=xlim, ylim=ylim, pch=pch[1], col=col[1], cex=cex[1], ...)#
}#
}#
if(axes & !add & is.null(fact[1])){#
axis(vertical+1)#
}#
}
q()
DataSet <- read.csv("~/Desktop/DataSet.txt")
View(DataSet)
source("http://stat.duke.edu/courses/Fall12/sta101.001/labs/inference.R")
inference(data = DataSet$pop.Cath, group = DataSet$pop.Prot, est = "mean", type = "ht", alternative = "twosided", method = "theoretical", null = 0, siglevel = .05)
inference(data = DataSet$pop.Cath, group = DataSet$pop.Prot, est = "mean", type = "ht", alternative = "twosided", method = "theoretical", null = 0)
inference(data = DataSet$pop.Cath, group = DataSet$pop.Prot, est = "mean", type = "ht", alternative = "twosided", method = "theoretical")
class(DataSet$pop.Cath)
class(DataSet$pop.Prot)
inference(data = DataSet$Paired, est = "mean", type = "ht", alternative = "twosided", method = "theoretical", null = 0)
atheismCompare <- read.csv("~/Dropbox/OI Labs/(6) lab6 - in progress/data/atheismCompare.csv")
View(atheismCompare)
usa <- atheismCompare[atheismCompare == "United States",]
View(usa)
inference(usa$response, usa$year, success = "atheist", est = "proportion", type = "ht", method = "theoretical", null = 0, alternative = "twosided")
class(usa$response,)
class(usa$response)
class(usa$year)
inference(usa$response, as.factor(usa$year), success = "atheist", est = "proportion", type = "ht", method = "theoretical", null = 0, alternative = "twosided")
source("http://stat.duke.edu/courses/Fall12/sta101.001/labs/inference.R")
680-454
us = c(rep("a great deal", 454), rep("not a great deal", 226))
duke = c(rep("a great deal", 10), rep("not a great deal", 10))
response = cbind(us,duke)
gr = rep(c("us",680), rep("duke",length(duke)))
gr = c(rep("us",680), rep("duke",length(duke)))
inference(data = response, group = gr, esp = "proportion", success = "a great deal", order = c("duke","us"),
null = 0, alternative = "twosided", type = "ht", method = "theoretical")
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
null = 0, alternative = "twosided", type = "ht", method = "theoretical")
response = cbind(us,duke)
us = c(rep("a great deal", 454), rep("not a great deal", 226))
duke = c(rep("a great deal", 10), rep("not a great deal", 10))
response = c(us,duke)
gr = c(rep("us",680), rep("duke",length(duke)))
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
null = 0, alternative = "twosided", type = "ht", method = "theoretical")
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
type = "ci", method = "theoretical")
n_duke = 90
suc_duke = 60
fail_duke = n_duke - suc_duke
us = c(rep("a great deal", 454), rep("not a great deal", 226))
duke = c(rep("a great deal", suc_duke), rep("not a great deal", fail_duke))
response = c(us,duke)
gr = c(rep("us",680), rep("duke",length(duke)))
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
null = 0, alternative = "twosided", type = "ht", method = "theoretical")
n_duke = 90
suc_duke = 40
fail_duke = n_duke - suc_duke
us = c(rep("a great deal", 454), rep("not a great deal", 226))
duke = c(rep("a great deal", suc_duke), rep("not a great deal", fail_duke))
response = c(us,duke)
gr = c(rep("us",680), rep("duke",length(duke)))
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
null = 0, alternative = "twosided", type = "ht", method = "theoretical")
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
type = "ci", method = "theoretical")
source("http://stat.duke.edu/courses/Fall12/sta101.001/labs/inference.R")
n_duke = 88
suc_duke = 56
fail_duke = n_duke - suc_duke
us = c(rep("a great deal", 454), rep("not a great deal", 226))
duke = c(rep("a great deal", suc_duke), rep("not a great deal", fail_duke))
response = c(us,duke)
gr = c(rep("us",680), rep("duke",length(duke)))
inference(data = response, group = gr, est = "proportion", success = "a great deal", order = c("duke","us"),
type = "ci", method = "theoretical")
AFD <- read.csv("~/Desktop/AFD.csv")
View(AFD)
source("http://stat.duke.edu/courses/Fall12/sta101.001/labs/inference.R")
inference(data = AFD$AFD, group = AFD$Income, est = "mean", type = "ht", alternative = "greater", method = "theoretical")
inference(data = AFD$AFD, group = as.factor(AFD$Income), est = "mean", type = "ht", alternative = "greater", method = "theoretical")
AFD$Income = as.factor(AFD$Income)
inference(data = AFD$AFD, group = AFD$Income, est = "mean", type = "ht", alternative = "greater", method = "theoretical")
popular = read.csv("http://stat.duke.edu/courses/Fall12/sta101.001/data/popular.csv")
setwd("~/Desktop/Teaching/Sta 101 - F12/Lecture slides/(6) Unit 5/Lecture 2/figures/popular")
names(popular)
mosaicplot(table(popular$goals,popular$gender))
mosaicplot(table(popular$goals,popular$grade))
mosaicplot(table(popular$grade,popular$goals))
?mosaicplot
mosaicplot(table(popular$grade,popular$goals), main = "", cex.axis = 1.5)
pdf('popular_mosaic.pdf', 5, 5)#
#
mosaicplot(table(popular$grade,popular$goals), main = "", cex.axis = 1.5)#
#
dev.off()
mosaicplot(table(popular$grade,popular$goals), main = "", cex.axis = 1.5, las = 2)
pdf('popular_mosaic.pdf', 5, 5)#
#
mosaicplot(table(popular$grade,popular$goals), main = "", cex.axis = 1.5, las = 2)#
#
dev.off()
par(mar=c(0,0,0,0))#
mosaicplot(table(popular$grade,popular$goals), main = "", cex.axis = 1.5, las = 2)
pdf('popular_mosaic.pdf', 5, 5)#
#
par(mar=c(0,0,0,0))#
mosaicplot(table(popular$grade,popular$goals), main = "", cex.axis = 1.5, las = 2)#
#
dev.off()
pdf('popular.pdf', 6, 3)#
#
chiTail(df = 4, U = 1.3121)#
#
dev.off()
chiTail <- function(df, U, showdf = TRUE, axes = TRUE){#
	par(mar=c(2, 1, 1, 1), mgp=c(2.1, 0.8, 0), las=1)#
	sd <- sqrt(2*df)#
	xmax <- max(df + 4.000102*sd,U+2)#
	x <- seq(0, xmax, 0.05)#
	y <- dchisq(x, df)#
	plot(x, y, type='l', axes=FALSE)#
#
	if(axes == TRUE){#
		abline(h=0)#
		axis(1, at=c(0,U,xmax+3), label = c(0,U,NA), cex.axis = 2)		#
	}#
	if(axes == FALSE){#
		lines(c(0,xmax), c(0,0))#
	}#
	if(showdf == TRUE){#
		text(x = 0.8*xmax, y = 0.5*max(y), paste("df =",df), cex = 2)	#
	}	#
	these <- which(x > U)#
	X <- x[c(these[1], these, rev(these)[1])]#
	Y <- c(0, y[these], 0)#
	polygon(X, Y, col='#569BBD')#
}
pdf('popular.pdf', 6, 3)#
#
chiTail(df = 4, U = 1.3121)#
#
dev.off()
chiTail <- function(df, U, showdf = TRUE, axes = TRUE){#
	par(mar=c(2, 1, 1, 1), mgp=c(2.1, 0.8, 0), las=1)#
	sd <- sqrt(2*df)#
	xmax <- max(df + 4.000102*sd,U+2)#
	x <- seq(0, xmax, 0.05)#
	y <- dchisq(x, df)#
	plot(x, y, type='l', axes=FALSE)#
#
	if(axes == TRUE){#
		abline(h=0)#
		axis(1, at=c(0,U+0.5,xmax+3), label = c(0,U,NA), cex.axis = 2)		#
	}#
	if(axes == FALSE){#
		lines(c(0,xmax), c(0,0))#
	}#
	if(showdf == TRUE){#
		text(x = 0.8*xmax, y = 0.5*max(y), paste("df =",df), cex = 2)	#
	}	#
	these <- which(x > U)#
	X <- x[c(these[1], these, rev(these)[1])]#
	Y <- c(0, y[these], 0)#
	polygon(X, Y, col='#569BBD')#
}
chiTail(df = 4, U = 1.3121)
pdf('popular.pdf', 5, 3)#
#
chiTail(df = 4, U = 1.3121)#
#
dev.off()
pdf('popular.pdf', 7, 3)#
#
chiTail(df = 4, U = 1.3121)#
#
dev.off()
chiTail <- function(df, U, showdf = TRUE, axes = TRUE){#
	par(mar=c(2, 1, 1, 1), mgp=c(2.1, 0.8, 0), las=1)#
	sd <- sqrt(2*df)#
	xmax <- max(df + 4.000102*sd,U+2)#
	x <- seq(0, xmax, 0.05)#
	y <- dchisq(x, df)#
	plot(x, y, type='l', axes=FALSE)#
#
	if(axes == TRUE){#
		abline(h=0)#
		axis(1, at=c(0,U,xmax+3), label = c(0,U,NA), cex.axis = 2)		#
	}#
	if(axes == FALSE){#
		lines(c(0,xmax), c(0,0))#
	}#
	if(showdf == TRUE){#
		text(x = 0.8*xmax, y = 0.5*max(y), paste("df =",df), cex = 2)	#
	}	#
	these <- which(x > U)#
	X <- x[c(these[1], these, rev(these)[1])]#
	Y <- c(0, y[these], 0)#
	polygon(X, Y, col='#569BBD')#
}
pdf('popular.pdf', 7, 3)#
#
chiTail(df = 4, U = 1.3121)#
#
dev.off()
chiTail(df = 4, U = 1.3121)#
axis(1, at = 1.7, label = "1.3121")
?axis
chiTail(df = 4, U = 1.3121)#
axis(1, at = 1.7, label = "1.3121", tick = FALSE)
pdf('popular.pdf', 7, 3)#
#
chiTail(df = 4, U = 1.3121)#
axis(1, at = 1.7, label = "1.3121", tick = FALSE, cex = 2)#
#
dev.off()
?axis
pdf('popular.pdf', 7, 3)#
#
chiTail(df = 4, U = 1.3121)#
axis(1, at = 1.7, label = "1.3121", tick = FALSE, cex.axis = 2)#
#
dev.off()
pdf('popular.pdf', 7, 3)#
#
chiTail(df = 4, U = 1.3121)#
axis(1, at = 1.9, label = "1.3121", tick = FALSE, cex.axis = 2)#
#
dev.off()
pdf('popular.pdf', 7, 3)#
#
chiTail(df = 4, U = 1.3121)#
axis(1, at = 2.5, label = "1.3121", tick = FALSE, cex.axis = 2)#
#
dev.off()
56/88
454/680
(56+454)/(32+226)
(56+454)/(88+680)
(56+454)/(32+226)
(32+226)/(88+680)
56+454
88 + 680
510 / 768
1-.664
source("http://stat.duke.edu/courses/Fall12/sta101.001/labs/inference.R")
inference(data = popular$goals, group = popular$grade, est = "proportion", type = "ht", alternative = "greater", method = "theoretical")
(.64-.67)/sqrt(0.664*0.336/88 + 0.664*0.336/680)
pnorm(0.56, lower.tail=FALSE)
pnorm(0.56, lower.tail=FALSE)*2
icecap = read.csv("~/Desktop/Teaching/Sta 101 - F12/Lecturettes/Unit 5/inference_diff_proportions/icecap.csv")
names(icecap)
inference(icecap$response,icecap$group,type="ht",alternative="twosided")
inference(icecap$response,icecap$group,type="ht",alternative="twosided", method="theoretical")
inference(icecap$response,icecap$group,type="ht",alternative="twosided", method="theoretical",est="proportion")
inference(icecap$response,icecap$group,type="ht",alternative="twosided", method="theoretical",est="proportion",success="a great deal")
?pwr.t2n.test
??pwr.t2n.test
5/5*95
q()
