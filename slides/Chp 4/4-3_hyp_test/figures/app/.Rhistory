qqnoem(samp_means_50)
qqnorm(samp_means_50)
samp_means_50 <- rep(0, 5000)#
#
for(i in 1:5000){#
  samp <- sample(ames$SalePrice, 5)#
  samp_means_50[i] <- mean(samp)#
  }#
#
hist(samp_means_50, freq = FALSE)
qqnorm(samp_means_50)
q()
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		sim = matrix(NA, nrow = n, ncol = nsim)#
		#
		if(type == "ci"){#
			cat("Bootstrapping, please wait...", "\n")#
			for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
			sim_dist = apply(sim, 2, statistic)#
			#
			ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
			counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
		  	for (i in 1:2) {#
		    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
		    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
		  	}#
		}#
#
	}#
	# two variables#
#
}
d = runif(100,0,100)
mean(d)
sd(d)
inference(var1 = d, est = c("mean"), type = "ci")
#
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		sim = matrix(NA, nrow = n, ncol = nsim)#
		#
		if(type == "ci"){#
			cat("Bootstrapping, please wait...", "\n")#
			for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
			sim_dist = apply(sim, 2, statistic)#
			#
			ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
			counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
		  	for (i in 1:2) {#
		    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
		    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
		  	}#
			cat(c(conf.level*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
		}#
#
	}#
	# two variables#
#
}
inference(var1 = d, est = c("mean"), type = "ci")
ames <- read.delim("http://www.amstat.org/publications/jse/v19n3/decock/AmesHousing.txt")#
summary(ames$SalePrice)#
hist(ames$SalePrice)#
samp1 <- sample(ames$SalePrice, 50)#
mean(samp1)#
hist(samp1, probability = TRUE)#
mean(samp1)#
samp_means_5 <- rep(0, 5000)#
for(i in 1:5000)#
{#
  samp <- sample(ames$SalePrice, 5)#
  samp_means_5[i] <- mean(samp)#
}#
xbar <- mean(samp1)#
se <- sd(samp1)/sqrt(5)#
hist(samp_means_5, probability = TRUE)#
lines(x = seq(50000,350000,0.01), y = dnorm(seq(50000,350000,0.01), mean = xbar, sd = se), col = "blue")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		sim = matrix(NA, nrow = n, ncol = nsim)#
		#
		if(type == "ci"){#
			cat("Bootstrapping, please wait...", "\n")#
			for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
			sim_dist = apply(sim, 2, statistic)#
			#
			ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
			counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
		  	for (i in 1:2) {#
		    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
		    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
		  	}#
			cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
		}#
#
	}#
	# two variables
}
inference(var1 = d, est = c("mean"), type = "ci")
b = c(rep("yes",10),rep("no",5), est = "proportion", type = "ci", outcome = "no")
b = c(rep("yes",10),rep("no",5))
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
(2/12) - 1.96 * sqrt(2/12 * 10/12 / 10)
(5/15) - 1.96 * sqrt(5/15 * 10/15 / 15)
(5/15) + 1.96 * sqrt(5/15 * 10/15 / 15)
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = "no")
inference(var1 = b, est = "proportion", type = "ci", outcome = yes")
)
))))))
)))
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 10)
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100)
qnorm(0.975)
?qt
qt( (1 - conflevel)/2)+conflevel , df = 50 - 1)
qt( (1 - conflevel)/2+conflevel , df = 50 - 1)
conflevel = 0.95
qt( (1 - conflevel)/2+conflevel , df = 50 - 1)
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(mtehod == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "quantitative"){#
				se = sd(var1) / sqrt(n)#
				if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
				if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
				}#
			if(type == "categorical"){#
				p = actual / n#
				se = sqrt(p * (1-p) / n)#
			}#
			me = critvalue * se#
			ci = c( actual - me , actual + me)#
		}#
#
#
	}#
	# two variables#
#
}
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100)
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "quantitative"){#
				se = sd(var1) / sqrt(n)#
				if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
				if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
				}#
			if(type == "categorical"){#
				p = actual / n#
				se = sqrt(p * (1-p) / n)#
			}#
			me = critvalue * se#
			ci = c( actual - me , actual + me)#
		}#
#
#
	}#
	# two variables#
#
}
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100)
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "simulation")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "quantitative"){#
				se = sd(var1) / sqrt(n)#
				if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
				if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
				}#
			if(type == "categorical"){#
				p = actual / n#
				se = sqrt(p * (1-p) / n)#
				critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
			}#
			me = critvalue * se#
			ci = c( actual - me , actual + me)#
		}#
#
#
	}#
	# two variables#
#
}
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type1 == "quantitative"){#
				se = sd(var1) / sqrt(n)#
				if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
				if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
				}#
			if(type1 == "categorical"){#
				p = actual / n#
				se = sqrt(p * (1-p) / n)#
				critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
			}#
			me = critvalue * se#
			ci = c( actual - me , actual + me)#
		}#
#
#
	}#
	# two variables#
#
}
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type1 == "quantitative"){#
				se = sd(var1) / sqrt(n)#
				if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
				if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
				}#
			if(type1 == "categorical"){#
				p = actual / n#
				se = sqrt(p * (1-p) / n)#
				critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
			}#
			me = critvalue * se#
			ci = c( actual - me , actual + me)#
			cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
		}#
#
#
	}#
	# two variables#
#
}
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "simulation")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(y2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					se = sd(var1) / sqrt(n)#
					if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
					if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
					}#
				if(type1 == "categorical"){#
					p = actual / n#
					if(n * p < 10 | n * (1 - p) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "simulation")
inference(var1 = d, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference(var1 = d, est = "mean", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
#
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference on the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}						#
						}#
					}#
				if(type1 == "categorical"){#
					p = actual / n#
					if(n * p < 10 | n * (1 - p) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = d, est = "mean", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference(var1 = d, est = "median", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.")					#
						}#
					}#
				if(type1 == "categorical"){#
					p = actual / n#
					if(n * p < 10 | n * (1 - p) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = d, est = "mean", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					p = actual / n#
					if(n * p < 10 | n * (1 - p) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = d, est = "mean", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					p = actual / n#
					if(n * p < 10 | n * (1 - p) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = d, est = "mean", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
inference(var1 = b, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
k = c(rep("yes", 50), rep("no", 34))
inference(var1 = k, est = "proportion", type = "ci", outcome = "yes", nsim = 100, method = "theoretical")
k
inference(var1 = k, est = "proportion", type = "ci", outcome = "no", nsim = 100, method = "theoretical")
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion
outcome
outcome = "yes"
n = length(k)
		actual = statistic(var1)
var1 = k
		actual = statistic(var1)
actual
					p = actual / n
p
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ci", outcome = "no", nsim = 100, method = "theoretical")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		if(type1 == "quantitative"){#
			statistic = match.fun(est)	# sample mean or median#
		}#
		if(type1 == "categorical"){#
			statistic = function(var1){sum(var1 == outcome)/n}	# sample proportion#
		}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap Distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}			#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ci", outcome = "no", nsim = 100, method = "theoretical")
mean(d)
mean(d - (mean(d)-50))
mean(d - (mean(d)-60))
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.9*max(counts), col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist_temp = apply(sim, 2, statistic)#
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)			#
				#
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_distt >= actual)))	#
				#
			  	xmin = min(c(-1.1*abs(actual), randomization.dist))#
			  	xmax = max(c(1.1*actual, randomization.dist))#
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label, cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, 1.25*max(counts)))$counts#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "more"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "two.sided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
					lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
					}#
#
			  	text(x = actual, y = 1.2*max(counts), paste("obs diff\n", round(actual,3), sep = " "), col = "red", cex = 0.8)						#
					#
			}		#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ci", outcome = "no", nsim = 100, method = "simulation", null = 50)
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
#
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.9*max(counts), col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist_temp = apply(sim, 2, statistic)#
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)			#
				#
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_dist >= actual)))	#
				#
			  	xmin = min(c(-1.1*abs(actual), randomization.dist))#
			  	xmax = max(c(1.1*actual, randomization.dist))#
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label, cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, 1.25*max(counts)))$counts#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "more"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "two.sided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
					lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
					}#
#
			  	text(x = actual, y = 1.2*max(counts), paste("obs diff\n", round(actual,3), sep = " "), col = "red", cex = 0.8)						#
					#
			}		#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
#
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# print "sample statistic"#
	label = "sample statistic"	#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap distribution", xlab = label)$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.9*max(counts), col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist_temp = apply(sim, 2, statistic)#
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)			#
				#
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_dist >= actual)))	#
				#
			  	xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label, cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, 1.25*max(counts)))$counts#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "more"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "two.sided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
					lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
					}#
#
			  	text(x = actual, y = 1.2*max(counts), paste("obs diff\n", round(actual,3), sep = " "), col = "red", cex = 0.8)						#
					#
			}		#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}
nsim = 10000
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}
			sim = matrix(NA, nrow = n, ncol = nsim)
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}
				sim_dist_temp = apply(sim, 2, statistic)
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)
null = 50
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_dist >= actual)))
			  	xmin = min(c(-1.1*abs(actual), sim_dist))
			  	xmax = max(c(1.1*actual, sim_dist))
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label, cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, 1.25*max(counts)))$counts
?hist
counts = hist(sim_dist)$counts
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label, cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, 1.25*max(counts)))$counts
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label, cex.lab = 0.9, xlim = c(xmin, xmax))$counts
				counts = hist(sim_dist, main = "Randomization distribution", xlab = label)$counts
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null, type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.9*max(counts), col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist_temp = apply(sim, 2, statistic)#
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)			#
				#
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_dist >= actual)))	#
				#
			  	xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				counts = hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$counts#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "more"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "two.sided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
					lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
					}#
#
			  	text(x = actual, y = 1.2*max(counts), paste("obs diff\n", round(actual,3), sep = " "), col = "red", cex = 0.8)						#
					#
			}		#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null, alternative = c("less","more","two.sided"), type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.9*max(counts), col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist_temp = apply(sim, 2, statistic)#
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)			#
				#
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_dist >= actual)))	#
				#
			  	xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				counts = hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$counts#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "more"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "two.sided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)		#
					lines(x = c(-1*actual,-1*actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
					}#
#
			  	text(x = actual, y = 1.2*max(counts), paste("obs diff\n", round(actual,3), sep = " "), col = "red", cex = 0.8)						#
					#
			}		#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
mean(k)
inference(var1 = d, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50)
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 50, alternative = "more")
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 55, alternative = "more")
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 55, alternative = "more")
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 55, alternative = "more")
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 56, alternative = "more")
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 59, alternative = "more")
inference(var1 = d, est = "mean", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 59, alternative = "less")
k
barplot(k)
barplot(table(k))
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.5, alternative = "less")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.5, alternative = "less")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.5, alternative = "less")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.75, alternative = "more")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.75, alternative = "more")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.55, alternative = "more")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.55, alternative = "two.sided")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.55, alternative = "two.sided")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.52, alternative = "two.sided")
# inference#
inference <- function(var1, var2 = NULL, est = c("mean", "median", "proportion"), outcome = NULL, order = NA, nsim = 10000, conflevel = 0.95, null, alternative = c("less","more","two.sided"), type = c("ci","ht"), method = c("theoretical","simulation")){#
	# var1: variable 1, can be numeric or categorical#
	# var2: variable 2, categorical#
	# est: parameter to estimate, mean, median, or mode#
	# outcome: which outcome of the categorical variable to do inference on#
	# order: when var2 is given, order of groups in which to subtract parameters#
	# nsim: number of simulations#
	# level: confidence level, value between 0 and 1#
	#
	# possible error: variables not of same length#
	if (!is.null(var2)){#
		if (length(var1) != length(var2)) {stop("The two variables must be of the same length.")}#
	}#
	#
	# possible error: confidence level greater than 1#
	if(conflevel > 1){conflevel = conflevel / 100}#
	#
	# possible error: drop NAs, and if var2 is given, use pairwise complete#
	if (is.null(var2)) {#
    	if (sum(is.na(var1)) > 0) {var1 = var1[!is.na(var1)]}#
  	}#
	if (!is.null(var2)) {#
    	if (sum(is.na(var1)) > 0 | sum(is.na(var2)) > 0) {#
      		var1.temp = var1[!is.na(var1) & !is.na(var2)]#
      		var2.temp = var2[!is.na(var1) & !is.na(var2)]#
      		var1 = var1.temp#
      		var2 = var2.temp#
    	}#
  	}#
#
	# set variable type for var1#
	type1 = "categorical"#
  	if (is.numeric(var1)) {type1 = "quantitative"}#
	#
	# print variable types#
	if (!is.null(var2)) {#
    	type2 = "categorical"#
    	if(is.numeric(var2)){#
			type2 = "quantitative"#
    		cat(paste("Variable 1:", type1, ", Variable 2:", type2, "\n"))#
			}#
  		}#
	if (is.null(var2)) {#
    	type2 = "only1var"#
    	cat(paste("One", type1, "variable", "\n"))#
  	}#
#
	# the quantitative variable should be var1 if one categorical and one quantitative#
  	if (type1 == "categorical" & type2 == "quantitative") {#
    	var1.temp = var2#
    	var2.temp = var1#
    	var1 = var1.temp#
    	var2 = var2.temp#
    	type1 = "quantitative"#
    	type2 = "categorical"#
  	}#
#
	# possible error: missing estimate#
  	if(is.null(est)) {#
		stop("Please specify a sample statistic: mean, median, or proportion")#
  	}#
#
	# possible error: wrong estimate#
	if(type1 == "quantitative" & est == "proportion"){#
		stop("Variable is quantitative, sample statistic cannot be a proportion, choose either mean or median")#
	}#
	#
	if(type1 == "categorical" & est == "mean"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	if(type1 == "categorical" & est == "median"){#
		stop("Variable is categorical, sample statistic cannot be a mean or a median, use proportion")#
	}#
	#
	# possible error: outcome not defined for categorical variable#
	if(type1 == "categorical" & is.null(outcome)){#
		stop("Variable is categorical, please specify which outcome you're interested in")#
	}#
	#
	# define sample size#
	n = length(var1)#
	#
	# one variable#
	if(type2 == "only1var"){#
		cat("Single", est, "\n")#
		# set statistic: mean, median, or proportion#
		if(type1 == "quantitative"){statistic = match.fun(est)}#
		if(type1 == "categorical"){statistic = function(var1){sum(var1 == outcome)/n}}#
	#
		actual = statistic(var1)#
		cat(paste("Observed ", est, sep = "", ": ", round(actual, 3)), "\n")#
		#
		# simulation#
		if(method == "simulation"){#
			sim = matrix(NA, nrow = n, ncol = nsim)#
			#
			# bootstrap ci#
			if(type == "ci"){#
				cat("Bootstrapping, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist = apply(sim, 2, statistic)#
#
				ci = quantile(sim_dist, c( (1 - conflevel)/2 , ((1 - conflevel)/2)+conflevel ))#
				counts = hist(sim_dist, main = "Bootstrap distribution", xlab = "bootstrap statistic")$counts  #
			  	for (i in 1:2) {#
			    	segments(ci[i], 0, ci[i], 0.9*max(counts), col="red", lwd=2)#
			    	text(round(ci[i],3), max(counts), pos=1, col="red", round(ci[i],3))#
			  	}#
				cat(c(conflevel*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
			}#
			#
			# randomization test#
			if(type == "ht"){#
				cat("Randomizing, please wait...", "\n")#
				for(i in 1:nsim){sim[,i] = sample(var1, n, replace = TRUE)}#
				sim_dist_temp = apply(sim, 2, statistic)#
				sim_dist = sim_dist_temp - (mean(sim_dist_temp) - null)			#
				#
				smaller.tail = min(c(mean(sim_dist <= actual), mean(sim_dist >= actual)))	#
				#
			  	xmin = min(c(-1.1*abs(actual), sim_dist))#
			  	xmax = max(c(1.1*actual, sim_dist))#
				counts = hist(sim_dist, main = "Randomization distribution", xlab = "randomization statistic")$counts#
			    alternative = match.arg(alternative)#
#
				if(alternative == "less"){#
					if(actual < null){cat(paste("p-value: ", smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "more"){#
					if(actual < null){cat(paste("p-value: ", 1 - smaller.tail,"\n"))}				#
					if(actual > null){cat(paste("p-value: ", smaller.tail,"\n"))}#
					lines(x = c(actual,actual), y = c(0,1.1*max(counts)), col="red", lwd=2)#
				}#
				if(alternative == "two.sided"){#
					cat(paste("p-value: ", smaller.tail * 2,"\n"))#
					lines(x = c(actual,actual), y = c(0,1.15*max(counts)), col="red", lwd=2)#
					if(actual >= null){#
						temp = actual - null#
						lines(x = c(null - temp,null - temp), y = c(0,1.1*max(counts)), col="red", lwd=2)						#
					}#
					if(actual < null){#
						temp = null - actual#
						lines(x = c(null + temp,null + temp), y = c(0,1.1*max(counts)), col="red", lwd=2)						#
					}		#
					}#
#
			  	text(x = actual, y = 1.2*max(counts), paste("obs diff\n", round(actual,3), sep = " "), col = "red", cex = 0.8)						#
					#
			}		#
		}#
		#
		if(method == "theoretical"){#
			if(type == "ci"){#
				if(type1 == "quantitative"){#
					if(est == "median"){stop("Use simulation methods for inference for the median.")}#
					if(est == "mean"){#
						se = sd(var1) / sqrt(n)#
						if(n >= 50) {critvalue = qnorm( (1 - conflevel)/2 + conflevel )}#
						if(n < 50) {critvalue = qt( (1 - conflevel)/2 + conflevel , df = n - 1)}#
						hist(var1, main = "Histogram of sample data", xlab = "sample data")	#
						cat("Check histogram to verify that sample data do not come from an extremely skewed distribution.\n")					#
						}#
					}#
				if(type1 == "categorical"){#
					if(n * actual < 10 | n * (1 - actual) < 10){#
						stop("There aren't at least 10 successes and 10 failures, use simulation methods instead.")#
					}#
					#
					se = sqrt(p * (1-p) / n)#
					critvalue = qnorm( (1 - conflevel)/2 + conflevel )#
					barplot(table(var1), main = "Barplot of sample data", xlab = "sample data")#
					abline(h = 10, lty = 3)#
					cat("Check barplot to verify that there are at least 10 successes and 10 failures.\n")					#
				}#
				me = critvalue * se#
				ci = c(actual - me , actual + me)#
				cat(c(conflevel*100, "% Confidence interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))	#
			}#
		}#
#
#
	}#
	# two variables#
}
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.52, alternative = "two.sided")
inference(var1 = k, est = "proportion", type = "ht", outcome = "no", nsim = 100, method = "simulation", null = 0.52, alternative = "two.sided")
load("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 8/survey.Rdata")
names(survey)
source("http://www.openintro.org/stat/data/cdc.R")
names(csc)
names(cdc)
hist(cdc$weight)
hist(cdc$wtdesire)
hist(cdc$wtdesire/cdc$weught)
hist(cdc$wtdesire/cdc$weight)
dim(cdc)
hist(survey$sleep)
mean(survey$sleep)
mean(survey$sleep, na.rm = TRUE)
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
load("survey.RData")
data = survey$sleep[!is.na(survey$sleep)]
setwd("4-2confidenceIntervals/figures/sleep")
pdf("sleep_hist.pdf", height = 3, width = 4)#
#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
#
dev.off()
#
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(3,3,0,0))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(4,3,1,1))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
mean(data)#
sd(data)
length(data)
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(4,3,1,1), mgp = c(0.7,2,1))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
#
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(4,3,1,1), mgp = c(2,0.7,1))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
#
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(4,3,1,1), mgp = c(2,0.7,2))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(4,3,1,1), mgp=c(2.3,0.7,0))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(3.5,3.5,1,1), mgp=c(2.3,0.7,0))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
2.03/sqrt(217)
2*0.1378
6.7 - 0.28
6.7 + 0.28
1.96*.28
1.96*.14
6.7 - 0.27
6.7 + 0.27
2.33 * 2.03/sqrt(217)
6.7 - 0.32
6.7 + 0.32
gpa = survey$gpa[!is.na(survey$gpa)]
mean(gpa)#
sd(gpa)#
length(gpa)
gpa = survey$gpa[!is.na(survey$gpa) & survey$gpa <= 4]
mean(gpa)#
sd(gpa)#
length(gpa)
boxplot(gpa, horiz = TRUE)
boxplot(gpa, horizontal = TRUE)
setwd("4-3hypothesisTesting/figures/gpa")#
#
#
pdf("sleep_hist.pdf", height = 2, width = 4)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
boxplot(gpa, horizontal = TRUE, xlab = "gpa")#
dev.off()
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
setwd("4-3hypothesisTesting/figures/gpa")
#
pdf("sleep_hist.pdf", height = 2, width = 4)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
boxplot(gpa, horizontal = TRUE, xlab = "gpa")#
dev.off()
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
setwd("4-2confidenceIntervals/figures/sleep")#
#
pdf("sleep_hist.pdf", height = 3, width = 4)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
hist(data, col="#22558833", border="#225588", main = "", xlab = "sleep")#
dev.off()
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
setwd("4-3hypothesisTesting/figures/gpa")#
#
pdf("gpa_box.pdf", height = 2, width = 4)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
boxplot(gpa, horizontal = TRUE, xlab = "gpa")#
dev.off()
#
pdf("gpa_box.pdf", height = 3, width = 6)#
par(mar=c(3.5,3.5,0,0), mgp=c(2.3,0.7,0))#
boxplot(gpa, horizontal = TRUE, xlab = "gpa")#
dev.off()
pdf("gpa_box.pdf", height = 3, width = 6)#
par(mar=c(2,2,0,0), mgp=c(2.3,0.7,0))#
boxplot(gpa, horizontal = TRUE, xlab = "gpa")#
dev.off()
setwd("4-3hypothesisTesting/figures/gpa")#
#
pdf("gpa_box.pdf", height = 3, width = 6)#
par(mar=c(2,2,0,0), mgp=c(2,0.7,0))#
boxplot(gpa, horizontal = TRUE, xlab = "gpa", cex.axis = 1.5)#
dev.off()
setwd("4-3hypothesisTesting/figures/gpa")#
#
pdf("gpa_box.pdf", height = 3, width = 6)#
par(mar=c(0,2,0,0), mgp=c(2,0.7,0))#
boxplot(gpa, horizontal = TRUE, cex.axis = 1.5)#
dev.off()
#
pdf("gpa_box.pdf", height = 3, width = 6)#
par(mar=c(1.5,0,0,0), mgp=c(2,0.7,0))#
boxplot(gpa, horizontal = TRUE, cex.axis = 1.5)#
dev.off()
1.96 * 0.28/sqrt(217)
3.59+0.04
1.96 * 0.28/sqrt(203)
0.28/sqrt(203)
(3.59-3.37)/0.02
names(survey)
hist(survey$schools_applied)
mean(survey$schools_applied)
mean(survey$schools_applied, na.rm = TRUE)
boxplot(survey$schools_applied)
app = survey$schools_applied[!is.na(survey$schools_applied)]
mean(app)#
sd(app)#
length(app)
mean(5,8)
5+8
13/2
library(openintro)
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar, axes = FALSE)#
axis(1, at=c(mu - 3*se, mu, xbar, mu + 3*se), label=expression(0, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), 0))
mu = 6.5#
se = 7 / sqrt(207)#
xbar = 9.7
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar, axes = FALSE)#
axis(1, at=c(mu - 3*se, mu, xbar, mu + 3*se), label=expression(0, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), 0))
(9.7-6.5)/(7/sqrt(205))
(9.7-8)/(7/sqrt(205))
mu = 8#
se = 7 / sqrt(206)#
xbar = 9.7
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar, axes = FALSE)#
axis(1, at=c(mu - 3*se, mu, xbar, mu + 3*se), label=expression(0, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), 0))
7 / sqrt(206)
1.7/0.4877131
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se))#
axis(1, at=c(mu - 4*se, mu, xbar, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se))#
axis(1, at=c(mu - 4*se, mu, xbar-1, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.5, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se))#
axis(1, at=c(mu - 4*se, mu, xbar-0.5, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.25, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se))#
axis(1, at=c(mu - 4*se, mu, xbar-0.25, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se))#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
3hypothesisTesting
setwd("4-3hypothesisTesting/figures/app")
#
pdf("app_pval_gr.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se))#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))#
dev.off()
1.7/.5
pnorm(3.4)
1-pnorm(3.4)
q()
