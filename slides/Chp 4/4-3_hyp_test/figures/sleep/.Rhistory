bootstrap.dist
resample(y = response, group = group, order = c("teen","adult"), outcome = "yes", num = 100, distribution = TRUE)
0.15*-1.1
resample <- function(y, group = NULL, num = 10000, order = NA, outcome = NA, conf.level=0.95, statistic=NULL, distribution = FALSE) {#
#y: variable#
#group: second variable if applicable#
#num: number of bootstrap samples#
#level: confidence level, 95% by default#
#statistic: If unspecified, defaults to mean for quantitative data, proportion for binary data, difference in proportions for binary y and group, difference in means for quantitative y, binary group, and correlation for quantitative y and group.  Otherwise, can be any function of y or y and group (e.g. median, sd, function(y, group) = ...)#
#distribution:  make true if want bootstrap distribution returned #
#
if (is.null(group)) {#
if (sum(is.na(y))>0) y = y[!is.na(y)]#
}#
#
else {#
if (sum(is.na(y))>0 | sum(is.na(group))>0) {#
yy = y[!is.na(y) & !is.na(group)]#
group = group[!is.na(y) & !is.na(group)]#
y = yy#
}#
}#
#
quantitative = FALSE#
if (length(levels(as.factor(y)))>2)   {#
if (is.numeric(y)) {quantitative=TRUE}#
else {stop("Variable is not numeric or binary, please define a statistic.")}#
}#
#
n = length(y)#
label = "Sample Statistic"#
#
if (is.null(group)) { #one variable#
stop("Missing group variable")#
}#
#
#
# make characters and numeric into factors, if there are only two categories#
if(class(y) == "character"){y = as.factor(y)}#
if(class(group) == "character"){group = as.factor(group)}#
if(class(group) == "numeric" | class(group) == "integer"){#
if(length(levels(as.factor(group))) > 2){stop("Grouping variable has more than 2 categories.")}		#
if(length(levels(as.factor(group))) == 1){stop("Grouping variable has only 1 category.")}		#
if(length(levels(as.factor(group))) == 2){group = as.factor(group)}#
}#
#
#
# order#
if(length(order) == 1 & !is.na(order[1])){#
stop("Please provide two categories for order.")#
}#
if(length(order) == 2){#
if( all(order %in% levels(group)) == FALSE){#
str = paste(order[which(!(order %in% levels(group)))], collapse=" ")#
stop(paste(str,": not a category of the group variable",sep = " "))#
}#
if((sum(levels(group) == order) == 0) == TRUE){#
group = relevel(group, ref = levels(as.factor(group))[2])#
}		#
}#
#
# bootstrap#
if(!is.null(group)) {   #two variables#
y.boot = matrix(NA, n, num)#
group.boot = matrix(NA, n, num)#
for (i in 1:num) {#
indices = sample(1:n, n, replace=TRUE)#
if(is.factor(y)){#
y.boot[,i] = levels(y)[y[indices]]				#
}#
if(is.numeric(y)){#
y.boot[,i] = y[indices]								#
}#
group.boot[,i] = levels(group)[group[indices]]	# shouldn't the indices for group be samples w/o replacement?#
}#
}#
#
# sample sizes#
n1 = sum(group==levels(as.factor(group))[1])#
n2 = sum(group==levels(as.factor(group))[2])#
#
# outcome#
if(is.factor(y)){#
if(is.na(outcome)){#
outcome = levels(as.factor(y))[1]#
}#
if(outcome %in% levels(y) == FALSE){#
stop(paste(outcome," not a category of the outcome variable",sep = " "))#
}#
if(length(outcome) != 1){#
outcome = outcome[1]#
}		#
}#
if(!is.factor(y)){#
if(!is.na(outcome)){#
cat("Warning: Outcome is ignored for numeric variable.\n")#
}#
}#
#
# calculate statistic#
if (is.null(statistic)) {#
if (length(levels(as.factor(group))) == 2) {   #two groups#
if (length(levels(as.factor(y))) > 2) {  #difference in means#
statistic = function(y,group.boot) {#
mean(y[group.boot==levels(as.factor(group))[1]], na.rm = TRUE) - mean(y[group.boot == levels(as.factor(group))[2]], na.rm = TRUE) #difference in means#
}#
label = paste("difference in sample means,\n", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
}#
else { #binary  - difference in proportions#
statistic = function(y,group.boot){#
sum(y==outcome & group.boot==levels(as.factor(group))[1])/n1 - sum(y==outcome & group.boot==levels(as.factor(group))[2])/n2 #
}#
label = paste("difference in sample proportions of \"", outcome,"\",\n", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
}#
}#
else { #correlation#
statistic  = cor#
label = "Sample Correlation"#
}#
}#
#
cat("Bootstrapping, please wait...\n")#
bootstrap.dist = rep(NA, num)#
for (i in 1:num){#
bootstrap.dist[i] = statistic(y.boot[,i], group.boot[,i])#
}#
#
actual = statistic(y, group)#
xmin = min(0.9*abs(actual), min(bootstrap.dist, na.rm = TRUE))#
xmax = max(1.1*actual, max(bootstrap.dist, na.rm = TRUE))#
#
counts = hist(bootstrap.dist)$counts  #
#
hist(bootstrap.dist, main = "Bootstrap Distribution", xlab = paste("Simulated", label, sep=" "), cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, max(counts))) #
#
ci = quantile(bootstrap.dist, c((1-conf.level)/2, (1-conf.level)/2+conf.level), na.rm = TRUE)#
for (i in 1:2) {#
segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="blue", lwd=2)#
text(round(ci[i],3), max(counts), pos=1, col="blue", round(ci[i],3))#
}#
#
cat(paste("Observed ", label, sep="", ": ", round(actual,3),"\n"))#
cat(paste("SE = ", round(sd(bootstrap.dist, na.rm = TRUE),2),"\n"))#
if (distribution){#
return(bootstrap.dist)#
}#
else {#
cat(c(conf.level*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
} #
}
resample(y = response, group = group, order = c("teen","adult"), outcome = "yes", num = 100, distribution = TRUE)
resample(y = response, group = group, order = c("teen","adult"), outcome = "yes")
(.87-.72)-1.96(.87*.13/800+.72*.28/2252)
(.87-.72) - 1.96 * (.87*.13/800+.72*.28/2252)
(.87-.72) - 1.96 * sqrt(.87*.13/800+.72*.28/2252)
(.87-.72) + 1.96 * sqrt(.87*.13/800+.72*.28/2252)
quantitative = FALSE#
if (length(levels(as.factor(y)))>2)   {#
if (is.numeric(y)) {quantitative=TRUE}#
else {stop("Variable is not numeric or binary, please define a statistic.")}#
}#
#
n = length(y)#
label = "Sample Statistic"#
#
if (is.null(group)) { #one variable#
stop("Missing group variable")#
}#
#
#
# make characters and numeric into factors, if there are only two categories#
if(class(y) == "character"){y = as.factor(y)}#
if(class(group) == "character"){group = as.factor(group)}#
if(class(group) == "numeric" | class(group) == "integer"){#
if(length(levels(as.factor(group))) > 2){stop("Grouping variable has more than 2 categories.")}		#
if(length(levels(as.factor(group))) == 1){stop("Grouping variable has only 1 category.")}		#
if(length(levels(as.factor(group))) == 2){group = as.factor(group)}#
}#
#
#
# order#
if(length(order) == 1 & !is.na(order[1])){#
stop("Please provide two categories for order.")#
}#
if(length(order) == 2){#
if( all(order %in% levels(group)) == FALSE){#
str = paste(order[which(!(order %in% levels(group)))], collapse=" ")#
stop(paste(str,": not a category of the group variable",sep = " "))#
}#
if((sum(levels(group) == order) == 0) == TRUE){#
group = relevel(group, ref = levels(as.factor(group))[2])#
}		#
}#
#
# bootstrap#
if(!is.null(group)) {   #two variables#
y.boot = matrix(NA, n, num)#
group.boot = matrix(NA, n, num)#
for (i in 1:num) {#
indices = sample(1:n, n, replace=TRUE)#
if(is.factor(y)){#
y.boot[,i] = levels(y)[y[indices]]				#
}#
if(is.numeric(y)){#
y.boot[,i] = y[indices]								#
}#
group.boot[,i] = levels(group)[group[indices]]	# shouldn't the indices for group be samples w/o replacement?#
}#
}#
#
# sample sizes#
n1 = sum(group==levels(as.factor(group))[1])#
n2 = sum(group==levels(as.factor(group))[2])#
#
# outcome#
if(is.factor(y)){#
if(is.na(outcome)){#
outcome = levels(as.factor(y))[1]#
}#
if(outcome %in% levels(y) == FALSE){#
stop(paste(outcome," not a category of the outcome variable",sep = " "))#
}#
if(length(outcome) != 1){#
outcome = outcome[1]#
}		#
}#
if(!is.factor(y)){#
if(!is.na(outcome)){#
cat("Warning: Outcome is ignored for numeric variable.\n")#
}#
}#
#
# calculate statistic#
if (is.null(statistic)) {#
if (length(levels(as.factor(group))) == 2) {   #two groups#
if (length(levels(as.factor(y))) > 2) {  #difference in means#
statistic = function(y,group.boot) {#
mean(y[group.boot==levels(as.factor(group))[1]], na.rm = TRUE) - mean(y[group.boot == levels(as.factor(group))[2]], na.rm = TRUE) #difference in means#
}#
label = paste("difference in sample means,\n", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
}#
else { #binary  - difference in proportions#
statistic = function(y,group.boot){#
sum(y==outcome & group.boot==levels(as.factor(group))[1])/n1 - sum(y==outcome & group.boot==levels(as.factor(group))[2])/n2 #
}#
label = paste("difference in sample proportions of \"", outcome,"\",\n", levels(as.factor(group))[1],"-",levels(as.factor(group))[2], sep = "")#
}#
}#
else { #correlation#
statistic  = cor#
label = "Sample Correlation"#
}#
}#
#
cat("Bootstrapping, please wait...\n")#
bootstrap.dist = rep(NA, num)#
for (i in 1:num){#
bootstrap.dist[i] = statistic(y.boot[,i], group.boot[,i])#
}#
#
actual = statistic(y, group)#
xmin = min(0.9*abs(actual), min(bootstrap.dist, na.rm = TRUE))#
xmax = max(1.1*actual, max(bootstrap.dist, na.rm = TRUE))#
#
counts = hist(bootstrap.dist)$counts  #
#
hist(bootstrap.dist, main = "Bootstrap Distribution", xlab = paste("Simulated", label, sep=" "), cex.lab = 0.9, xlim = c(xmin, xmax), ylim = c(0, max(counts))) #
#
ci = quantile(bootstrap.dist, c((1-conf.level)/2, (1-conf.level)/2+conf.level), na.rm = TRUE)#
for (i in 1:2) {#
segments(ci[i], 0, ci[i], max(counts)-max(counts)*.1, col="blue", lwd=2)#
text(round(ci[i],3), max(counts), pos=1, col="blue", round(ci[i],3))#
}#
#
cat(paste("Observed ", label, sep="", ": ", round(actual,3),"\n"))#
cat(paste("SE = ", round(sd(bootstrap.dist, na.rm = TRUE),2),"\n"))#
if (distribution){#
return(bootstrap.dist)#
}#
else {#
cat(c(conf.level*100, "% Bootstrap interval = (", round(ci[1],3), ",", round(ci[2],3), ")\n"))		#
}
2252+800
table(group,response)
4.912-4.118
.055*.99
.945*.005
.05445/(.0455+.004725)
.05445/(.05455+.004725)
treeDiag <- function(main, p1, p2, out1=c('Yes','No'), out2=c('Yes','No'), textwd=0.15, solwd=0.2, SBS=c(TRUE,TRUE), showSol=TRUE, solSub=NULL, digits=4, textadj=0.015, cex.main=1.3, col.main="#999999", showWork=FALSE){#
#
#=====> Checks <=====##
SBS <- rep(SBS, 2)#
if(length(p1) != length(out1)){#
stop("p1 and out1 must have the same length")#
}#
P1 <- format(p1)#
P2 <- list()#
for(i in 1:length(p1)){#
P2[[i]] <- format(p2[[i]])#
if(length(p2[[i]]) != length(out2)){#
stop("Each list item of p2 must have the same length as out2")#
}#
}#
#
#=====> Prepare Formatting <=====##
x <- (0.75-2*textwd)/2#
x <- c(0, x, x+textwd, 2*x+textwd, 2*x+2*textwd+0.05)#
y1 <- c(.4, -.4)#
y2 <- c(.21, -.21)#
n1 <- length(p1)#
n2 <- length(p2[[1]])#
if(n1 == 2 && n2 > 2){#
y2 <- seq(.23, -.23, len=n2)#
} else if(n1 > 2 && n2 == 2){#
y1 <- seq(.5, -.5, len=n1)#
} else if(n1 > 2 && n2 > 2){#
y1 <- seq(.5, -.5, len=n1)#
y2 <- seq(.15, -.15, len=n2)#
}#
#
#=====> Basic Plot <=====##
par(mar=c(0,0,0,0))#
plot(1,1,type='n', axes=F, ylim=c(-.76,1.03), xlim=c(0,0.8+solwd), xlab='', ylab='')#
text(mean(x[2:3]), 0.95, main[1], cex=cex.main, col=col.main)#
text(mean(x[4:5]), 0.95, main[2], cex=cex.main, col=col.main)#
#
#=====> Branches <=====##
for(i in 1:n1){#
lines(x[1:2], c(0,y1[i]))#
lines(x[2:3], c(y1[i],y1[i]), lty=2)#
if(SBS[1]){#
temp <- paste(out1[i], P1[i], sep=",  ")#
text(mean(x[2:3]), y1[i]-textadj, temp, pos=3)#
} else {#
text(mean(x[2:3]), y1[i], P1[i]+textadj, pos=1)#
text(mean(x[2:3]), y1[i], out1[i]-textadj, pos=3)#
}#
for(j in 1:n2){#
lines(x[3:4], y1[i]+c(0, y2[j]))#
lines(x[4:5], y1[i]+c(y2[j], y2[j]), lty=2)#
if(SBS[2]){#
temp <- paste(out2[j], P2[[i]][j], sep=",  ")#
text(mean(x[4:5]), y1[i]+y2[j]-textadj, temp, pos=3)#
} else {#
text(mean(x[4:5]), y1[i]+y2[j], P2[[i]][j], pos=1)#
text(mean(x[4:5]), y1[i]+y2[j], out2[j], pos=3)#
}#
if(showSol){#
sol <- round(p1[i]*p2[[i]][j], digits)#
if(showWork){#
temp <- paste(p1[i], p2[[i]][j], sep="*")#
sol  <- paste(temp, sol, sep=" = ")#
}#
if(!is.null(solSub)[1]){#
sol  <- solSub[[i]][j]#
}#
text(x[5], y1[i]+y2[j], sol, pos=4)#
}#
}#
}#
}#
#
# Examples#
# generic with random probabilities#
treeDiag(main = c("Cancer","Mammography given cancer"), p1 = c(0.017, 1-0.017), p2 = list(c(0.78,0.22), c(0.10,0.90)), out1 = c("cancer","no cancer"), out2 = c("positive","negative"), showWork = TRUE)
treeDiag(main = c("Country","Caught"), p1 = c(0.5, 0.5), p2 = list(c(0.8,0.2), c(0.3,0.7)), out1 = c("France","Germany"), out2 = c("yes","no"), showWork = TRUE)
treeDiag(main = c("Country","Caught"), p1 = c(0.5, 0.5), p2 = list(c(0.8,0.2), c(0.3,0.7)), out1 = c("Germany","France"), out2 = c("yes","no"), showWork = TRUE)
.4*.15
.15/.55
.4/.55
11905 - 294 * 26 + 1767 * 1
treeDiag(main = c(".04/.17","Caught"), p1 = c(0.5, 0.5), p2 = list(c(0.8,0.2), c(0.3,0.7)), out1 = c("Germany","France"), out2 = c("yes","no"), showWork = TRUE)
.04/.17
treeDiag(main = c("Pregnancy","Test Result"), p1 = c(0.055, 1-.055), p2 = list(c(0.99,0.01), c(0.995,0.005)), out1 = c("Pregnant","Not pregnant"), out2 = c("positive","negative"), showWork = TRUE)
treeDiag(main = c("Pregnancy","Test Result"), p1 = c(0.055, 1-.055), p2 = list(c(0.99,0.01), c(0.005,0.995)), out1 = c("Pregnant","Not pregnant"), out2 = c("positive","negative"), showWork = TRUE)
q()
1.5+.5+1+1+2+2+2
1+1+2.5+2+1+1+6.5+1+1
1+3+4+1
10+17+10+7+9+5+4+5+10+6
10+17+10+6+5+7+6+5+10+3+20
1.5+.5+1+1+2+2+2
1+1+2.5+2+1+1+6.5+1+1
1+1+2+1+2
1+1+2+1+1
1+2+4+1
10+17+10+6+5+8+6+5+10+3+20
120*.07
120*.085
1-.8^10
sqrt(.35*.65/3012)
sqrt(.35*.65/3012)*1.96
(15400-16000)/sqrt(10000/sqrt(1000))
(15400-16000)/(10000/sqrt(1000))
1-.9706
6+5+10+10+17+6+8+10+3+5+20
q()
.005*.997
.995*.926
.995*(1-.926)
.00485/(.00485+.07363)
.995*.926
.004985/.079615
10+16.5+10+4.5+4+8+5+4+10+2+16
9+9.5+8+4+1+4.5+5+3+6+2+10
10+10+9+4.25+2+8+5+1.5+10+1+10
q()
dim(bdims)
load("/Users/mine/Dropbox/OI Labs/lab3/data/bdims.RData")
dim(bdims)
names(bdims)
q()
7+6+5+12
120/30
4*12
12/30
120*.4
q()
200-100
100/6
77+132-40
169/211
q()
?sample
outcomes <- c("H", "M")
sim_basket <- sample(outcomes, size = 1, replace = TRUE)
sim_basket <- sample(outcomes, size = 1, replace = TRUE, prob = c(45,55))
sim_basket <- sample(outcomes, size = 1, replace = TRUE, prob = c(0.45,0.55))
sim_basket
sim_basket <- sample(outcomes, size = 133, replace = TRUE, prob = c(0.45,0.55))
sim_basket
barplot(table(sim_basket))
sim_basket <- sample(outcomes, size = 1000, replace = TRUE, prob = c(0.45,0.55))
barplot(table(sim_basket))
.21/.51
q()
install.packages("maptools")
library(maptools)
q()
install.packages(c("Matrix", "boot", "mgcv", "nlme", "rpart"), lib="/Library/Frameworks/R.framework/Versions/2.14/Resources/library")
install.packages("rgeos")
install.packages("rgeos",type="source")
k  <- 0:400#
p  <- 0.2#
n  <- 400#
xlim <- c(50,110)#
m = n*p#
s = sqrt(n*p*(1-p))
plot(dbinom(k,n,p), xlim = xlim, type = "s", axes=FALSE, xlab="", ylab="")
axis(1)
lines(x = k, y = dnorm(k, m, s), col = "#225588", lwd = 2)
X <- c(0, 0:70.5, 70.5)
Y <- c(0, dnorm(0:70.5, m, s), 0)
polygon(X, Y, border = "#225588", col = "#22558844")
legend("topright", lty = c(1,1), lwd = c(1,3), col = c("black", "#225588"), legend = c("Bin(400,0.20)", "N(80,8)"))
a = rnorm(100,0,1)
qqnorm(a)
a = rnorm(100,10,5)
qqnorm(a)
7+6+5+12
110/30
(111/30)*7
(111/30)*6
(111/30)*5
(111/30)*12
26+22+18
111-66
26+22+18+45
1-.95^50
10*1.5
q()
library(openinro)
install.packages("openintro")
library(openintro)
normTail(77,5,U = 85, axes = FALSE)
axis(1, at = c(77-15, 77, 85, 77+15), labels = c(NA,"77","85",NA))
-17/5
85-77
8/6
8/5
1 - 0.9542
1 - 0.9452
.23*.39
0.23 - 0.0897
.77*.27
0.14 / 0.70
dbinom(8,10,48)
dbinom(8,10,.48)
choose(10,8)
45 *  0.48^8 * 0.52^2
dbinom(8,10,.48)
100*.48*.52
sqrt(24.96)
sqrt(100*.48*.52)
.65^3*.35
dbinom(1,4,.35)
.075/25
q()
dbinom(3,50,0.08)
20*.56
50*.44
40*.2
100*.17
30-2.2
30-4.4
1-.8621
1-0.6217
q()
9 + 4 + 4 + 2 + 4 + 4 + 1 + 5 + 4 + 4
sqrt(.645*(1-.645)/124)
q()
library(openintro)
?normTail
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = white)#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
load("survey.RData")
app = survey$schools_applied[!is.na(survey$schools_applied)]#
#
mean(app)#
sd(app)#
length(app)#
#
mu = 8#
se = 7 / sqrt(206)#
xbar = 9.7
setwd("4-3hypothesisTesting/figures/app")
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = white)#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "white")#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))
pdf("app_z.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "white")#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))#
dev.off()
pdf("app_pval_gr.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "#22558833")#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 6.5"), paste(bar(x)," = 9.7"), NA))#
dev.off()
setwd("4-3hypothesisTesting/figures/app")#
#
pdf("app_z.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "white")#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 8"), paste(bar(x)," = 9.7"), NA))#
dev.off()#
#
#
pdf("app_pval_gr.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar-0.3, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "#22558833")#
axis(1, at=c(mu - 4*se, mu, xbar-0.3, mu + 4*se), label=expression(NA, paste(mu," = 8"), paste(bar(x)," = 9.7"), NA))#
dev.off()
2.03/sqrt(217)
sleep = survey$sleep[!is.na(survey$sleep)]
mean(sleep)#
sd(sleep)#
length(sleep)
.3/.14
.0003*100
mu = 7#
se = sd(sleep) / length(sleep)#
xbar = mean(sleep)
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
setwd("4-3hypothesisTesting/figures/sleep")
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, U = xbar, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "#22558833")#
axis(1, at=c(mu - 4*se, xbar, mu, mu + 4*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "#22558833")#
axis(1, at=c(mu - 4*se, xbar, mu, mu + 4*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))
mu = 7#
se = sd(sleep) / length(sleep)#
xbar = mean(sleep)
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, xlim = c(mu - 4*se, mu + 4*se), col = "#22558833")#
axis(1, at=c(mu - 4*se, xbar, mu, mu + 4*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))
mu
se
sd(sleep)
2.03/sqrt(217)
mu = 7#
se = sd(sleep) / sqrt(length(sleep))#
xbar = mean(sleep)
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))
pdf("sleep_pval.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))#
dev.off()
setwd("4-3hypothesisTesting/figures/sleep")#
#
pdf("sleep_pval_sm.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))#
dev.off()
setwd("/Users/mine/Desktop/Teaching/Sta 101 - S12/Lectures/Lecture 10")
setwd("4-3hypothesisTesting/figures/sleep")#
#
pdf("sleep_pval_sm.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), NA))#
dev.off()
normTail(m = mu, s = se, L = xbar, U = (mean - xbar) + mean,axes = FALSE, col = "#22558833")
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, U = (mean - xbar) + mean, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, (mean - xbar) + mean, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), "7.3",NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, U = (mu - xbar) + mean, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, (mu - xbar) + mean, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), "7.3",NA))
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, U = (mu - xbar) + mu, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, (mu - xbar) + mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), "7.3",NA))
pdf("sleep_pval_ts.pdf", height = 3, width = 6)#
par(las=1, mar=c(1.6,0,0,0), mgp=c(3,0.5,0))#
normTail(m = mu, s = se, L = xbar, U = (mu - xbar) + mu, axes = FALSE, col = "#22558833")#
axis(1, at=c(mu - 3*se, xbar, mu, (mu - xbar) + mu, mu + 3*se), label=expression(NA, paste(bar(x)," = 6.7"), paste(mu," = 7"), "7.3",NA))#
dev.off()
0.0162 * 2
sqrt(x=)
2.07/sqrt(217)
1.96*.14
6.7-.27
2.33*.14
2.33*2.03/sqrt(217)
2.07/sqrt(217)
10-5*.14
6.7+5*.14
.3/.14
2+1.5+2.5+2+2+1.5+1.5+1
.5+1+1+1+1.5
14+5+1
q()
